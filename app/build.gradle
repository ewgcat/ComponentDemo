apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply from: 'tinker-support.gradle'
repositories {
    flatDir {
        dirs 'libs'
    }
}
android {
    dexOptions {
        javaMaxHeapSize "6g"
    }

    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        applicationId rootProject.applicationId
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        flavorDimensions '' + rootProject.versionCode
        resConfigs "zh"
        multiDexEnabled true

        //使用renderscript 兼容包
        renderscriptTargetApi 25
        renderscriptSupportModeEnabled true

        vectorDrawables.useSupportLibrary true
        javaCompileOptions.annotationProcessorOptions.includeCompileClasspath = true
        ndk {
            abiFilters "arm64-v8a"
        }

        kapt {
            arguments {
                arg("moduleName", project.getName())
            }
        }
        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : "$jpush_appkey", //JPush上注册的包名对应的appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    signingConfigs {
        releaseKey {
            keyAlias release_key_alias
            keyPassword release_key_password
            storeFile new File(rootProject.projectDir, "releaseKey.jks")
            storePassword release_store_password
        }
    }
    buildTypes {
        debug {
            //混淆
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseKey
        }
        release {
            //混淆
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseKey
        }
    }
    productFlavors {
        dev {
            buildConfigField "String", "HOST", "\"$dev_host\""
            buildConfigField "String", "FILE_HOST", "\"$dev_file_host\""
            buildConfigField "String", "WORKSPACE_HOST", "\"$workspace_dev_host\""
            buildConfigField "String", "WORKSPACE_FILE_HOST", "\"$workspace_dev_file_host\""
            buildConfigField "String", "H5_HOST", "\"$h5_dev_host\""
        }
        prod {
            buildConfigField "String", "HOST", "\"$prod_host\""
            buildConfigField "String", "FILE_HOST", "\"$prod_file_host\""
            buildConfigField "String", "WORKSPACE_HOST", "\"$workspace_prod_host\""
            buildConfigField "String", "WORKSPACE_FILE_HOST", "\"$workspace_prod_file_host\""
            buildConfigField "String", "H5_HOST", "\"$h5_prod_host\""
        }
        train {
            buildConfigField "String", "HOST", "\"$train_host\""
            buildConfigField "String", "FILE_HOST", "\"$train_file_host\""
            buildConfigField "String", "WORKSPACE_HOST", "\"$workspace_train_host\""
            buildConfigField "String", "WORKSPACE_FILE_HOST", "\"$workspace_train_file_host\""
            buildConfigField "String", "H5_HOST", "\"$h5_train_host\""
        }
        sittest {
            buildConfigField "String", "HOST", "\"$test_host\""
            buildConfigField "String", "FILE_HOST", "\"$test_file_host\""
            buildConfigField "String", "WORKSPACE_HOST", "\"$workspace_test_host\""
            buildConfigField "String", "WORKSPACE_FILE_HOST", "\"$workspace_test_file_host\""
            buildConfigField "String", "H5_HOST", "\"$h5_test_host\""
        }
    }
    variantFilter { variant ->
        if (variant.buildType.name == 'release') {
            for (flavor in variant.flavors) {
                if (flavor.name != "prod") {
                    variant.setIgnore(true)
                }
            }
        }
    }
    lintOptions {
        abortOnError false
        check 'Interoperability'
        checkReleaseBuilds false
        disable 'MissingTranslation'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}


dependencies {
    api project(':commonlib')
    kapt 'com.alibaba:arouter-compiler:1.1.4'
    if (!isModule.toBoolean()) {
        api project(':club_module')
        api project(':workspace_module')
    }
}
