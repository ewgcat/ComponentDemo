package com.yijian.clubmodule.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yijian.clubmodule.db.bean.OthermodelVo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OTHERMODEL_VO".
*/
public class OthermodelVoDao extends AbstractDao<OthermodelVo, Void> {

    public static final String TABLENAME = "OTHERMODEL_VO";

    /**
     * Properties of entity OthermodelVo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FaceRecognition = new Property(0, boolean.class, "faceRecognition", false, "FACE_RECOGNITION");
        public final static Property CoachSchedule = new Property(1, boolean.class, "coachSchedule", false, "COACH_SCHEDULE");
        public final static Property SellerSchedule = new Property(2, boolean.class, "sellerSchedule", false, "SELLER_SCHEDULE");
        public final static Property Reception = new Property(3, boolean.class, "reception", false, "RECEPTION");
    }


    public OthermodelVoDao(DaoConfig config) {
        super(config);
    }
    
    public OthermodelVoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OTHERMODEL_VO\" (" + //
                "\"FACE_RECOGNITION\" INTEGER NOT NULL ," + // 0: faceRecognition
                "\"COACH_SCHEDULE\" INTEGER NOT NULL ," + // 1: coachSchedule
                "\"SELLER_SCHEDULE\" INTEGER NOT NULL ," + // 2: sellerSchedule
                "\"RECEPTION\" INTEGER NOT NULL );"); // 3: reception
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OTHERMODEL_VO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OthermodelVo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getFaceRecognition() ? 1L: 0L);
        stmt.bindLong(2, entity.getCoachSchedule() ? 1L: 0L);
        stmt.bindLong(3, entity.getSellerSchedule() ? 1L: 0L);
        stmt.bindLong(4, entity.getReception() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OthermodelVo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getFaceRecognition() ? 1L: 0L);
        stmt.bindLong(2, entity.getCoachSchedule() ? 1L: 0L);
        stmt.bindLong(3, entity.getSellerSchedule() ? 1L: 0L);
        stmt.bindLong(4, entity.getReception() ? 1L: 0L);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public OthermodelVo readEntity(Cursor cursor, int offset) {
        OthermodelVo entity = new OthermodelVo( //
            cursor.getShort(offset + 0) != 0, // faceRecognition
            cursor.getShort(offset + 1) != 0, // coachSchedule
            cursor.getShort(offset + 2) != 0, // sellerSchedule
            cursor.getShort(offset + 3) != 0 // reception
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OthermodelVo entity, int offset) {
        entity.setFaceRecognition(cursor.getShort(offset + 0) != 0);
        entity.setCoachSchedule(cursor.getShort(offset + 1) != 0);
        entity.setSellerSchedule(cursor.getShort(offset + 2) != 0);
        entity.setReception(cursor.getShort(offset + 3) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(OthermodelVo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(OthermodelVo entity) {
        return null;
    }

    @Override
    public boolean hasKey(OthermodelVo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
