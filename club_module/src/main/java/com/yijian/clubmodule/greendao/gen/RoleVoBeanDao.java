package com.yijian.clubmodule.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yijian.clubmodule.db.bean.RoleVoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ROLE_VO_BEAN".
*/
public class RoleVoBeanDao extends AbstractDao<RoleVoBean, Void> {

    public static final String TABLENAME = "ROLE_VO_BEAN";

    /**
     * Properties of entity RoleVoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Classification = new Property(0, int.class, "classification", false, "CLASSIFICATION");
        public final static Property RoleCode = new Property(1, String.class, "roleCode", false, "ROLE_CODE");
        public final static Property RoleId = new Property(2, String.class, "roleId", false, "ROLE_ID");
        public final static Property RoleName = new Property(3, String.class, "roleName", false, "ROLE_NAME");
    }


    public RoleVoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public RoleVoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ROLE_VO_BEAN\" (" + //
                "\"CLASSIFICATION\" INTEGER NOT NULL ," + // 0: classification
                "\"ROLE_CODE\" TEXT," + // 1: roleCode
                "\"ROLE_ID\" TEXT," + // 2: roleId
                "\"ROLE_NAME\" TEXT);"); // 3: roleName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ROLE_VO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RoleVoBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getClassification());
 
        String roleCode = entity.getRoleCode();
        if (roleCode != null) {
            stmt.bindString(2, roleCode);
        }
 
        String roleId = entity.getRoleId();
        if (roleId != null) {
            stmt.bindString(3, roleId);
        }
 
        String roleName = entity.getRoleName();
        if (roleName != null) {
            stmt.bindString(4, roleName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RoleVoBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getClassification());
 
        String roleCode = entity.getRoleCode();
        if (roleCode != null) {
            stmt.bindString(2, roleCode);
        }
 
        String roleId = entity.getRoleId();
        if (roleId != null) {
            stmt.bindString(3, roleId);
        }
 
        String roleName = entity.getRoleName();
        if (roleName != null) {
            stmt.bindString(4, roleName);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public RoleVoBean readEntity(Cursor cursor, int offset) {
        RoleVoBean entity = new RoleVoBean( //
            cursor.getInt(offset + 0), // classification
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // roleCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // roleId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // roleName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RoleVoBean entity, int offset) {
        entity.setClassification(cursor.getInt(offset + 0));
        entity.setRoleCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRoleId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRoleName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(RoleVoBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(RoleVoBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(RoleVoBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
