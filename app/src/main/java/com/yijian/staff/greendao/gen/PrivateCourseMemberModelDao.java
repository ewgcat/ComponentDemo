package com.yijian.staff.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yijian.staff.db.bean.PrivateCourseMemberModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRIVATE_COURSE_MEMBER_MODEL".
*/
public class PrivateCourseMemberModelDao extends AbstractDao<PrivateCourseMemberModel, Long> {

    public static final String TABLENAME = "PRIVATE_COURSE_MEMBER_MODEL";

    /**
     * Properties of entity PrivateCourseMemberModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Idx = new Property(0, Long.class, "idx", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property HeadPath = new Property(2, String.class, "headPath", false, "HEAD_PATH");
        public final static Property MemberId = new Property(3, String.class, "memberId", false, "MEMBER_ID");
        public final static Property MemberName = new Property(4, String.class, "memberName", false, "MEMBER_NAME");
        public final static Property MemberSex = new Property(5, Integer.class, "memberSex", false, "MEMBER_SEX");
    }


    public PrivateCourseMemberModelDao(DaoConfig config) {
        super(config);
    }
    
    public PrivateCourseMemberModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRIVATE_COURSE_MEMBER_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idx
                "\"ID\" TEXT," + // 1: id
                "\"HEAD_PATH\" TEXT," + // 2: headPath
                "\"MEMBER_ID\" TEXT," + // 3: memberId
                "\"MEMBER_NAME\" TEXT," + // 4: memberName
                "\"MEMBER_SEX\" INTEGER);"); // 5: memberSex
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRIVATE_COURSE_MEMBER_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PrivateCourseMemberModel entity) {
        stmt.clearBindings();
 
        Long idx = entity.getIdx();
        if (idx != null) {
            stmt.bindLong(1, idx);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String headPath = entity.getHeadPath();
        if (headPath != null) {
            stmt.bindString(3, headPath);
        }
 
        String memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindString(4, memberId);
        }
 
        String memberName = entity.getMemberName();
        if (memberName != null) {
            stmt.bindString(5, memberName);
        }
 
        Integer memberSex = entity.getMemberSex();
        if (memberSex != null) {
            stmt.bindLong(6, memberSex);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PrivateCourseMemberModel entity) {
        stmt.clearBindings();
 
        Long idx = entity.getIdx();
        if (idx != null) {
            stmt.bindLong(1, idx);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String headPath = entity.getHeadPath();
        if (headPath != null) {
            stmt.bindString(3, headPath);
        }
 
        String memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindString(4, memberId);
        }
 
        String memberName = entity.getMemberName();
        if (memberName != null) {
            stmt.bindString(5, memberName);
        }
 
        Integer memberSex = entity.getMemberSex();
        if (memberSex != null) {
            stmt.bindLong(6, memberSex);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PrivateCourseMemberModel readEntity(Cursor cursor, int offset) {
        PrivateCourseMemberModel entity = new PrivateCourseMemberModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idx
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // headPath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // memberId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // memberName
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // memberSex
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PrivateCourseMemberModel entity, int offset) {
        entity.setIdx(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHeadPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMemberId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMemberName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMemberSex(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PrivateCourseMemberModel entity, long rowId) {
        entity.setIdx(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PrivateCourseMemberModel entity) {
        if(entity != null) {
            return entity.getIdx();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PrivateCourseMemberModel entity) {
        return entity.getIdx() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
