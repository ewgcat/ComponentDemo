package com.yijian.clubmodule.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yijian.clubmodule.db.bean.CourseStudentModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COURSE_STUDENT_MODEL".
*/
public class CourseStudentModelDao extends AbstractDao<CourseStudentModel, Long> {

    public static final String TABLENAME = "COURSE_STUDENT_MODEL";

    /**
     * Properties of entity CourseStudentModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Idx = new Property(0, Long.class, "idx", true, "_id");
        public final static Property Day = new Property(1, String.class, "day", false, "DAY");
        public final static Property DayAlias = new Property(2, String.class, "dayAlias", false, "DAY_ALIAS");
        public final static Property LocalDate = new Property(3, String.class, "localDate", false, "LOCAL_DATE");
        public final static Property WeekCode = new Property(4, Integer.class, "weekCode", false, "WEEK_CODE");
        public final static Property WeekName = new Property(5, String.class, "weekName", false, "WEEK_NAME");
    }


    public CourseStudentModelDao(DaoConfig config) {
        super(config);
    }
    
    public CourseStudentModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COURSE_STUDENT_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idx
                "\"DAY\" TEXT," + // 1: day
                "\"DAY_ALIAS\" TEXT," + // 2: dayAlias
                "\"LOCAL_DATE\" TEXT," + // 3: localDate
                "\"WEEK_CODE\" INTEGER," + // 4: weekCode
                "\"WEEK_NAME\" TEXT);"); // 5: weekName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COURSE_STUDENT_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CourseStudentModel entity) {
        stmt.clearBindings();
 
        Long idx = entity.getIdx();
        if (idx != null) {
            stmt.bindLong(1, idx);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(2, day);
        }
 
        String dayAlias = entity.getDayAlias();
        if (dayAlias != null) {
            stmt.bindString(3, dayAlias);
        }
 
        String localDate = entity.getLocalDate();
        if (localDate != null) {
            stmt.bindString(4, localDate);
        }
 
        Integer weekCode = entity.getWeekCode();
        if (weekCode != null) {
            stmt.bindLong(5, weekCode);
        }
 
        String weekName = entity.getWeekName();
        if (weekName != null) {
            stmt.bindString(6, weekName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CourseStudentModel entity) {
        stmt.clearBindings();
 
        Long idx = entity.getIdx();
        if (idx != null) {
            stmt.bindLong(1, idx);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(2, day);
        }
 
        String dayAlias = entity.getDayAlias();
        if (dayAlias != null) {
            stmt.bindString(3, dayAlias);
        }
 
        String localDate = entity.getLocalDate();
        if (localDate != null) {
            stmt.bindString(4, localDate);
        }
 
        Integer weekCode = entity.getWeekCode();
        if (weekCode != null) {
            stmt.bindLong(5, weekCode);
        }
 
        String weekName = entity.getWeekName();
        if (weekName != null) {
            stmt.bindString(6, weekName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CourseStudentModel readEntity(Cursor cursor, int offset) {
        CourseStudentModel entity = new CourseStudentModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idx
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // day
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dayAlias
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // localDate
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // weekCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // weekName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CourseStudentModel entity, int offset) {
        entity.setIdx(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDay(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDayAlias(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLocalDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWeekCode(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setWeekName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CourseStudentModel entity, long rowId) {
        entity.setIdx(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CourseStudentModel entity) {
        if(entity != null) {
            return entity.getIdx();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CourseStudentModel entity) {
        return entity.getIdx() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
