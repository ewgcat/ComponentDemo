package com.yijian.staff.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yijian.staff.mvp.huiji.huifang.bean.HuiFangTypeBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HUI_FANG_TYPE_BEAN".
*/
public class HuiFangTypeBeanDao extends AbstractDao<HuiFangTypeBean, Void> {

    public static final String TABLENAME = "HUI_FANG_TYPE_BEAN";

    /**
     * Properties of entity HuiFangTypeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "ID");
        public final static Property ConfigType = new Property(1, int.class, "configType", false, "CONFIG_TYPE");
        public final static Property PostId = new Property(2, int.class, "postId", false, "POST_ID");
        public final static Property ConfigName = new Property(3, String.class, "configName", false, "CONFIG_NAME");
        public final static Property TriggerDay = new Property(4, int.class, "triggerDay", false, "TRIGGER_DAY");
        public final static Property Order = new Property(5, int.class, "order", false, "ORDER");
    }


    public HuiFangTypeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public HuiFangTypeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HUI_FANG_TYPE_BEAN\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"CONFIG_TYPE\" INTEGER NOT NULL ," + // 1: configType
                "\"POST_ID\" INTEGER NOT NULL ," + // 2: postId
                "\"CONFIG_NAME\" TEXT," + // 3: configName
                "\"TRIGGER_DAY\" INTEGER NOT NULL ," + // 4: triggerDay
                "\"ORDER\" INTEGER NOT NULL );"); // 5: order
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HUI_FANG_TYPE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HuiFangTypeBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getConfigType());
        stmt.bindLong(3, entity.getPostId());
 
        String configName = entity.getConfigName();
        if (configName != null) {
            stmt.bindString(4, configName);
        }
        stmt.bindLong(5, entity.getTriggerDay());
        stmt.bindLong(6, entity.getOrder());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HuiFangTypeBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getConfigType());
        stmt.bindLong(3, entity.getPostId());
 
        String configName = entity.getConfigName();
        if (configName != null) {
            stmt.bindString(4, configName);
        }
        stmt.bindLong(5, entity.getTriggerDay());
        stmt.bindLong(6, entity.getOrder());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public HuiFangTypeBean readEntity(Cursor cursor, int offset) {
        HuiFangTypeBean entity = new HuiFangTypeBean( //
            cursor.getInt(offset + 0), // id
            cursor.getInt(offset + 1), // configType
            cursor.getInt(offset + 2), // postId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // configName
            cursor.getInt(offset + 4), // triggerDay
            cursor.getInt(offset + 5) // order
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HuiFangTypeBean entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setConfigType(cursor.getInt(offset + 1));
        entity.setPostId(cursor.getInt(offset + 2));
        entity.setConfigName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTriggerDay(cursor.getInt(offset + 4));
        entity.setOrder(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(HuiFangTypeBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(HuiFangTypeBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(HuiFangTypeBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
