package com.yijian.staff.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yijian.staff.db.bean.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Void> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Age = new Property(0, int.class, "age", false, "AGE");
        public final static Property Role = new Property(1, int.class, "role", false, "ROLE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property UserId = new Property(3, String.class, "userId", false, "USER_ID");
        public final static Property ShopId = new Property(4, String.class, "shopId", false, "SHOP_ID");
        public final static Property MerchantId = new Property(5, String.class, "merchantId", false, "MERCHANT_ID");
        public final static Property Token = new Property(6, String.class, "token", false, "TOKEN");
        public final static Property TokenAge = new Property(7, String.class, "tokenAge", false, "TOKEN_AGE");
        public final static Property HeadImg = new Property(8, String.class, "headImg", false, "HEAD_IMG");
        public final static Property Sex = new Property(9, String.class, "sex", false, "SEX");
        public final static Property Birthday = new Property(10, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Mobile = new Property(11, String.class, "mobile", false, "MOBILE");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"AGE\" INTEGER NOT NULL ," + // 0: age
                "\"ROLE\" INTEGER NOT NULL ," + // 1: role
                "\"NAME\" TEXT," + // 2: name
                "\"USER_ID\" TEXT," + // 3: userId
                "\"SHOP_ID\" TEXT," + // 4: shopId
                "\"MERCHANT_ID\" TEXT," + // 5: merchantId
                "\"TOKEN\" TEXT," + // 6: token
                "\"TOKEN_AGE\" TEXT," + // 7: tokenAge
                "\"HEAD_IMG\" TEXT," + // 8: headImg
                "\"SEX\" TEXT," + // 9: sex
                "\"BIRTHDAY\" TEXT," + // 10: birthday
                "\"MOBILE\" TEXT);"); // 11: mobile
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getAge());
        stmt.bindLong(2, entity.getRole());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(4, userId);
        }
 
        String shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindString(5, shopId);
        }
 
        String merchantId = entity.getMerchantId();
        if (merchantId != null) {
            stmt.bindString(6, merchantId);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(7, token);
        }
 
        String tokenAge = entity.getTokenAge();
        if (tokenAge != null) {
            stmt.bindString(8, tokenAge);
        }
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(9, headImg);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(10, sex);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(11, birthday);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(12, mobile);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getAge());
        stmt.bindLong(2, entity.getRole());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(4, userId);
        }
 
        String shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindString(5, shopId);
        }
 
        String merchantId = entity.getMerchantId();
        if (merchantId != null) {
            stmt.bindString(6, merchantId);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(7, token);
        }
 
        String tokenAge = entity.getTokenAge();
        if (tokenAge != null) {
            stmt.bindString(8, tokenAge);
        }
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(9, headImg);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(10, sex);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(11, birthday);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(12, mobile);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getInt(offset + 0), // age
            cursor.getInt(offset + 1), // role
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // shopId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // merchantId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // token
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // tokenAge
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // headImg
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sex
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // birthday
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // mobile
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setAge(cursor.getInt(offset + 0));
        entity.setRole(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShopId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMerchantId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setToken(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTokenAge(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHeadImg(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSex(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBirthday(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMobile(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(User entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(User entity) {
        return null;
    }

    @Override
    public boolean hasKey(User entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
